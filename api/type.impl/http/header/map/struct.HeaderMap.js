(function() {var type_impls = {
"wasmtime_wasi_http":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-HeaderMap%3CT%3E\" class=\"impl\"><a href=\"#impl-Clone-for-HeaderMap%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for HeaderMap&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; HeaderMap&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","wasmtime_wasi_http::types::FieldMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-HeaderMap%3CT%3E\" class=\"impl\"><a href=\"#impl-Debug-for-HeaderMap%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for HeaderMap&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","wasmtime_wasi_http::types::FieldMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-HeaderMap%3CT%3E\" class=\"impl\"><a href=\"#impl-Default-for-HeaderMap%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for HeaderMap&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; HeaderMap&lt;T&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","wasmtime_wasi_http::types::FieldMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C(HeaderName,+T)%3E-for-HeaderMap%3CT%3E\" class=\"impl\"><a href=\"#impl-Extend%3C(HeaderName,+T)%3E-for-HeaderMap%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;(HeaderName, T)&gt; for HeaderMap&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = (HeaderName, T)&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#419\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#427\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<(HeaderName, T)>","wasmtime_wasi_http::types::FieldMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C(Option%3CHeaderName%3E,+T)%3E-for-HeaderMap%3CT%3E\" class=\"impl\"><a href=\"#impl-Extend%3C(Option%3CHeaderName%3E,+T)%3E-for-HeaderMap%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;(<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;HeaderName&gt;, T)&gt; for HeaderMap&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = (<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;HeaderName&gt;, T)&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Extend a <code>HeaderMap</code> with the contents of another <code>HeaderMap</code>.</p>\n<p>This function expects the yielded items to follow the same structure as\n<code>IntoIter</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This panics if the first yielded item does not have a <code>HeaderName</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HeaderMap::new();\n\nmap.insert(ACCEPT, <span class=\"string\">\"text/plain\"</span>.parse().unwrap());\nmap.insert(HOST, <span class=\"string\">\"hello.world\"</span>.parse().unwrap());\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>extra = HeaderMap::new();\n\nextra.insert(HOST, <span class=\"string\">\"foo.bar\"</span>.parse().unwrap());\nextra.insert(COOKIE, <span class=\"string\">\"hello\"</span>.parse().unwrap());\nextra.append(COOKIE, <span class=\"string\">\"world\"</span>.parse().unwrap());\n\nmap.extend(extra);\n\n<span class=\"macro\">assert_eq!</span>(map[<span class=\"string\">\"host\"</span>], <span class=\"string\">\"foo.bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(map[<span class=\"string\">\"accept\"</span>], <span class=\"string\">\"text/plain\"</span>);\n<span class=\"macro\">assert_eq!</span>(map[<span class=\"string\">\"cookie\"</span>], <span class=\"string\">\"hello\"</span>);\n\n<span class=\"kw\">let </span>v = map.get_all(<span class=\"string\">\"host\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, v.iter().count());\n\n<span class=\"kw\">let </span>v = map.get_all(<span class=\"string\">\"cookie\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>, v.iter().count());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#419\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#427\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<(Option<HeaderName>, T)>","wasmtime_wasi_http::types::FieldMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C(HeaderName,+T)%3E-for-HeaderMap%3CT%3E\" class=\"impl\"><a href=\"#impl-FromIterator%3C(HeaderName,+T)%3E-for-HeaderMap%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;(HeaderName, T)&gt; for HeaderMap&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; HeaderMap&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = (HeaderName, T)&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<(HeaderName, T)>","wasmtime_wasi_http::types::FieldMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HeaderMap%3CT%3E\" class=\"impl\"><a href=\"#impl-HeaderMap%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; HeaderMap&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; HeaderMap&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Create an empty <code>HeaderMap</code> with the specified capacity.</p>\n<p>The returned map will allocate internal storage in order to hold about\n<code>capacity</code> elements without reallocating. However, this is a “best\neffort” as there are usage patterns that could cause additional\nallocations before <code>capacity</code> headers are stored in the map.</p>\n<p>More capacity than requested may be allocated.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Requested capacity too large: would overflow <code>usize</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>map: HeaderMap&lt;u32&gt; = HeaderMap::with_capacity(<span class=\"number\">10</span>);\n\n<span class=\"macro\">assert!</span>(map.is_empty());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">12</span>, map.capacity());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of headers stored in the map.</p>\n<p>This number represents the total number of <strong>values</strong> stored in the map.\nThis number can be greater than or equal to the number of <strong>keys</strong>\nstored given that a single key may have more than one associated value.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HeaderMap::new();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, map.len());\n\nmap.insert(ACCEPT, <span class=\"string\">\"text/plain\"</span>.parse().unwrap());\nmap.insert(HOST, <span class=\"string\">\"localhost\"</span>.parse().unwrap());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>, map.len());\n\nmap.append(ACCEPT, <span class=\"string\">\"text/html\"</span>.parse().unwrap());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3</span>, map.len());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.keys_len\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">keys_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of keys stored in the map.</p>\n<p>This number will be less than or equal to <code>len()</code> as each key may have\nmore than one associated value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HeaderMap::new();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, map.keys_len());\n\nmap.insert(ACCEPT, <span class=\"string\">\"text/plain\"</span>.parse().unwrap());\nmap.insert(HOST, <span class=\"string\">\"localhost\"</span>.parse().unwrap());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>, map.keys_len());\n\nmap.insert(ACCEPT, <span class=\"string\">\"text/html\"</span>.parse().unwrap());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>, map.keys_len());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the map contains no elements.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HeaderMap::new();\n\n<span class=\"macro\">assert!</span>(map.is_empty());\n\nmap.insert(HOST, <span class=\"string\">\"hello.world\"</span>.parse().unwrap());\n\n<span class=\"macro\">assert!</span>(!map.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HeaderMap::new();\nmap.insert(HOST, <span class=\"string\">\"hello.world\"</span>.parse().unwrap());\n\nmap.clear();\n<span class=\"macro\">assert!</span>(map.is_empty());\n<span class=\"macro\">assert!</span>(map.capacity() &gt; <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of headers the map can hold without reallocating.</p>\n<p>This number is an approximation as certain usage patterns could cause\nadditional allocations before the returned capacity is filled.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HeaderMap::new();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, map.capacity());\n\nmap.insert(HOST, <span class=\"string\">\"hello.world\"</span>.parse().unwrap());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">6</span>, map.capacity());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves capacity for at least <code>additional</code> more headers to be inserted\ninto the <code>HeaderMap</code>.</p>\n<p>The header map may reserve more space to avoid frequent reallocations.\nLike with <code>with_capacity</code>, this will be a “best effort” to avoid\nallocations until <code>additional</code> more headers are inserted. Certain usage\npatterns could cause additional allocations before the number is\nreached.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the new allocation size overflows <code>usize</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HeaderMap::new();\nmap.reserve(<span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get</a>&lt;K&gt;(&amp;self, key: K) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;<div class=\"where\">where\n    K: AsHeaderName,</div></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the value associated with the key.</p>\n<p>If there are multiple values associated with the key, then the first one\nis returned. Use <code>get_all</code> to get all values associated with a given\nkey. Returns <code>None</code> if there are no values associated with the key.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HeaderMap::new();\n<span class=\"macro\">assert!</span>(map.get(<span class=\"string\">\"host\"</span>).is_none());\n\nmap.insert(HOST, <span class=\"string\">\"hello\"</span>.parse().unwrap());\n<span class=\"macro\">assert_eq!</span>(map.get(HOST).unwrap(), <span class=\"kw-2\">&amp;</span><span class=\"string\">\"hello\"</span>);\n<span class=\"macro\">assert_eq!</span>(map.get(<span class=\"string\">\"host\"</span>).unwrap(), <span class=\"kw-2\">&amp;</span><span class=\"string\">\"hello\"</span>);\n\nmap.append(HOST, <span class=\"string\">\"world\"</span>.parse().unwrap());\n<span class=\"macro\">assert_eq!</span>(map.get(<span class=\"string\">\"host\"</span>).unwrap(), <span class=\"kw-2\">&amp;</span><span class=\"string\">\"hello\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_mut</a>&lt;K&gt;(&amp;mut self, key: K) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>&gt;<div class=\"where\">where\n    K: AsHeaderName,</div></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the value associated with the key.</p>\n<p>If there are multiple values associated with the key, then the first one\nis returned. Use <code>entry</code> to get all values associated with a given\nkey. Returns <code>None</code> if there are no values associated with the key.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HeaderMap::default();\nmap.insert(HOST, <span class=\"string\">\"hello\"</span>.to_string());\nmap.get_mut(<span class=\"string\">\"host\"</span>).unwrap().push_str(<span class=\"string\">\"-world\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(map.get(HOST).unwrap(), <span class=\"kw-2\">&amp;</span><span class=\"string\">\"hello-world\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_all\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_all</a>&lt;K&gt;(&amp;self, key: K) -&gt; GetAll&lt;'_, T&gt;<div class=\"where\">where\n    K: AsHeaderName,</div></h4></section></summary><div class=\"docblock\"><p>Returns a view of all values associated with a key.</p>\n<p>The returned view does not incur any allocations and allows iterating\nthe values associated with the key.  See <a href=\"struct.GetAll.html\"><code>GetAll</code></a> for more details.\nReturns <code>None</code> if there are no values associated with the key.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HeaderMap::new();\n\nmap.insert(HOST, <span class=\"string\">\"hello\"</span>.parse().unwrap());\nmap.append(HOST, <span class=\"string\">\"goodbye\"</span>.parse().unwrap());\n\n<span class=\"kw\">let </span>view = map.get_all(<span class=\"string\">\"host\"</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = view.iter();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"hello\"</span>, iter.next().unwrap());\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"goodbye\"</span>, iter.next().unwrap());\n<span class=\"macro\">assert!</span>(iter.next().is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains_key\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">contains_key</a>&lt;K&gt;(&amp;self, key: K) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    K: AsHeaderName,</div></h4></section></summary><div class=\"docblock\"><p>Returns true if the map contains a value for the specified key.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HeaderMap::new();\n<span class=\"macro\">assert!</span>(!map.contains_key(HOST));\n\nmap.insert(HOST, <span class=\"string\">\"world\"</span>.parse().unwrap());\n<span class=\"macro\">assert!</span>(map.contains_key(<span class=\"string\">\"host\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">iter</a>(&amp;self) -&gt; Iter&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator visiting all key-value pairs.</p>\n<p>The iteration order is arbitrary, but consistent across platforms for\nthe same crate version. Each key will be yielded once per associated\nvalue. So, if a key has 3 associated values, it will be yielded 3 times.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HeaderMap::new();\n\nmap.insert(HOST, <span class=\"string\">\"hello\"</span>.parse().unwrap());\nmap.append(HOST, <span class=\"string\">\"goodbye\"</span>.parse().unwrap());\nmap.insert(CONTENT_LENGTH, <span class=\"string\">\"123\"</span>.parse().unwrap());\n\n<span class=\"kw\">for </span>(key, value) <span class=\"kw\">in </span>map.iter() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}: {:?}\"</span>, key, value);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; IterMut&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator visiting all key-value pairs, with mutable value references.</p>\n<p>The iterator order is arbitrary, but consistent across platforms for the\nsame crate version. Each key will be yielded once per associated value,\nso if a key has 3 associated values, it will be yielded 3 times.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HeaderMap::default();\n\nmap.insert(HOST, <span class=\"string\">\"hello\"</span>.to_string());\nmap.append(HOST, <span class=\"string\">\"goodbye\"</span>.to_string());\nmap.insert(CONTENT_LENGTH, <span class=\"string\">\"123\"</span>.to_string());\n\n<span class=\"kw\">for </span>(key, value) <span class=\"kw\">in </span>map.iter_mut() {\n    value.push_str(<span class=\"string\">\"-boop\"</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.keys\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">keys</a>(&amp;self) -&gt; Keys&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator visiting all keys.</p>\n<p>The iteration order is arbitrary, but consistent across platforms for\nthe same crate version. Each key will be yielded only once even if it\nhas multiple associated values.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HeaderMap::new();\n\nmap.insert(HOST, <span class=\"string\">\"hello\"</span>.parse().unwrap());\nmap.append(HOST, <span class=\"string\">\"goodbye\"</span>.parse().unwrap());\nmap.insert(CONTENT_LENGTH, <span class=\"string\">\"123\"</span>.parse().unwrap());\n\n<span class=\"kw\">for </span>key <span class=\"kw\">in </span>map.keys() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, key);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.values\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">values</a>(&amp;self) -&gt; Values&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator visiting all values.</p>\n<p>The iteration order is arbitrary, but consistent across platforms for\nthe same crate version.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HeaderMap::new();\n\nmap.insert(HOST, <span class=\"string\">\"hello\"</span>.parse().unwrap());\nmap.append(HOST, <span class=\"string\">\"goodbye\"</span>.parse().unwrap());\nmap.insert(CONTENT_LENGTH, <span class=\"string\">\"123\"</span>.parse().unwrap());\n\n<span class=\"kw\">for </span>value <span class=\"kw\">in </span>map.values() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, value);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.values_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">values_mut</a>(&amp;mut self) -&gt; ValuesMut&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator visiting all values mutably.</p>\n<p>The iteration order is arbitrary, but consistent across platforms for\nthe same crate version.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HeaderMap::default();\n\nmap.insert(HOST, <span class=\"string\">\"hello\"</span>.to_string());\nmap.append(HOST, <span class=\"string\">\"goodbye\"</span>.to_string());\nmap.insert(CONTENT_LENGTH, <span class=\"string\">\"123\"</span>.to_string());\n\n<span class=\"kw\">for </span>value <span class=\"kw\">in </span>map.values_mut() {\n    value.push_str(<span class=\"string\">\"-boop\"</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">drain</a>(&amp;mut self) -&gt; Drain&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Clears the map, returning all entries as an iterator.</p>\n<p>The internal memory is kept for reuse.</p>\n<p>For each yielded item that has <code>None</code> provided for the <code>HeaderName</code>,\nthen the associated header name is the same as that of the previously\nyielded item. The first yielded item will have <code>HeaderName</code> set.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HeaderMap::new();\n\nmap.insert(HOST, <span class=\"string\">\"hello\"</span>.parse().unwrap());\nmap.append(HOST, <span class=\"string\">\"goodbye\"</span>.parse().unwrap());\nmap.insert(CONTENT_LENGTH, <span class=\"string\">\"123\"</span>.parse().unwrap());\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>drain = map.drain();\n\n\n<span class=\"macro\">assert_eq!</span>(drain.next(), <span class=\"prelude-val\">Some</span>((<span class=\"prelude-val\">Some</span>(HOST), <span class=\"string\">\"hello\"</span>.parse().unwrap())));\n<span class=\"macro\">assert_eq!</span>(drain.next(), <span class=\"prelude-val\">Some</span>((<span class=\"prelude-val\">None</span>, <span class=\"string\">\"goodbye\"</span>.parse().unwrap())));\n\n<span class=\"macro\">assert_eq!</span>(drain.next(), <span class=\"prelude-val\">Some</span>((<span class=\"prelude-val\">Some</span>(CONTENT_LENGTH), <span class=\"string\">\"123\"</span>.parse().unwrap())));\n\n<span class=\"macro\">assert_eq!</span>(drain.next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.entry\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">entry</a>&lt;K&gt;(&amp;mut self, key: K) -&gt; Entry&lt;'_, T&gt;<div class=\"where\">where\n    K: IntoHeaderName,</div></h4></section></summary><div class=\"docblock\"><p>Gets the given key’s corresponding entry in the map for in-place\nmanipulation.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: HeaderMap&lt;u32&gt; = HeaderMap::default();\n\n<span class=\"kw\">let </span>headers = <span class=\"kw-2\">&amp;</span>[\n    <span class=\"string\">\"content-length\"</span>,\n    <span class=\"string\">\"x-hello\"</span>,\n    <span class=\"string\">\"Content-Length\"</span>,\n    <span class=\"string\">\"x-world\"</span>,\n];\n\n<span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>header <span class=\"kw\">in </span>headers {\n    <span class=\"kw\">let </span>counter = map.entry(header).or_insert(<span class=\"number\">0</span>);\n    <span class=\"kw-2\">*</span>counter += <span class=\"number\">1</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(map[<span class=\"string\">\"content-length\"</span>], <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(map[<span class=\"string\">\"x-hello\"</span>], <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_entry\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_entry</a>&lt;K&gt;(\n    &amp;mut self,\n    key: K\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Entry&lt;'_, T&gt;, InvalidHeaderName&gt;<div class=\"where\">where\n    K: AsHeaderName,</div></h4></section></summary><div class=\"docblock\"><p>Gets the given key’s corresponding entry in the map for in-place\nmanipulation.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>This method differs from <code>entry</code> by allowing types that may not be\nvalid <code>HeaderName</code>s to passed as the key (such as <code>String</code>). If they\ndo not parse as a valid <code>HeaderName</code>, this returns an\n<code>InvalidHeaderName</code> error.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">insert</a>&lt;K&gt;(&amp;mut self, key: K, val: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    K: IntoHeaderName,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a key-value pair into the map.</p>\n<p>If the map did not previously have this key present, then <code>None</code> is\nreturned.</p>\n<p>If the map did have this key present, the new value is associated with\nthe key and all previous values are removed. <strong>Note</strong> that only a single\none of the previous values is returned. If there are multiple values\nthat have been previously associated with the key, then the first one is\nreturned. See <code>insert_mult</code> on <code>OccupiedEntry</code> for an API that returns\nall values.</p>\n<p>The key is not updated, though; this matters for types that can be <code>==</code>\nwithout being identical.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HeaderMap::new();\n<span class=\"macro\">assert!</span>(map.insert(HOST, <span class=\"string\">\"world\"</span>.parse().unwrap()).is_none());\n<span class=\"macro\">assert!</span>(!map.is_empty());\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>prev = map.insert(HOST, <span class=\"string\">\"earth\"</span>.parse().unwrap()).unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"world\"</span>, prev);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">append</a>&lt;K&gt;(&amp;mut self, key: K, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    K: IntoHeaderName,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a key-value pair into the map.</p>\n<p>If the map did not previously have this key present, then <code>false</code> is\nreturned.</p>\n<p>If the map did have this key present, the new value is pushed to the end\nof the list of values currently associated with the key. The key is not\nupdated, though; this matters for types that can be <code>==</code> without being\nidentical.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HeaderMap::new();\n<span class=\"macro\">assert!</span>(map.insert(HOST, <span class=\"string\">\"world\"</span>.parse().unwrap()).is_none());\n<span class=\"macro\">assert!</span>(!map.is_empty());\n\nmap.append(HOST, <span class=\"string\">\"earth\"</span>.parse().unwrap());\n\n<span class=\"kw\">let </span>values = map.get_all(<span class=\"string\">\"host\"</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = values.iter();\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"world\"</span>, <span class=\"kw-2\">*</span>i.next().unwrap());\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"earth\"</span>, <span class=\"kw-2\">*</span>i.next().unwrap());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove</a>&lt;K&gt;(&amp;mut self, key: K) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    K: AsHeaderName,</div></h4></section></summary><div class=\"docblock\"><p>Removes a key from the map, returning the value associated with the key.</p>\n<p>Returns <code>None</code> if the map does not contain the key. If there are\nmultiple values associated with the key, then the first one is returned.\nSee <code>remove_entry_mult</code> on <code>OccupiedEntry</code> for an API that yields all\nvalues.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HeaderMap::new();\nmap.insert(HOST, <span class=\"string\">\"hello.world\"</span>.parse().unwrap());\n\n<span class=\"kw\">let </span>prev = map.remove(HOST).unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello.world\"</span>, prev);\n\n<span class=\"macro\">assert!</span>(map.remove(HOST).is_none());</code></pre></div>\n</div></details></div></details>",0,"wasmtime_wasi_http::types::FieldMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HeaderMap\" class=\"impl\"><a href=\"#impl-HeaderMap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl HeaderMap</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>() -&gt; HeaderMap</h4></section></summary><div class=\"docblock\"><p>Create an empty <code>HeaderMap</code>.</p>\n<p>The map will be created without any capacity. This function will not\nallocate.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>map = HeaderMap::new();\n\n<span class=\"macro\">assert!</span>(map.is_empty());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, map.capacity());</code></pre></div>\n</div></details></div></details>",0,"wasmtime_wasi_http::types::FieldMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CK%3E-for-HeaderMap%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CK%3E-for-HeaderMap%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;K&gt; for HeaderMap&lt;T&gt;<div class=\"where\">where\n    K: AsHeaderName,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: K) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Using the index operator will cause a panic if the header you’re querying isn’t set.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details></div></details>","Index<K>","wasmtime_wasi_http::types::FieldMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-HeaderMap%3CT%3E\" class=\"impl\"><a href=\"#impl-IntoIterator-for-HeaderMap%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for HeaderMap&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; IntoIter&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a consuming iterator, that is, one that moves keys and values\nout of the map in arbitrary order. The map cannot be used after calling\nthis.</p>\n<p>For each yielded item that has <code>None</code> provided for the <code>HeaderName</code>,\nthen the associated header name is the same as that of the previously\nyielded item. The first yielded item will have <code>HeaderName</code> set.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Basic usage.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HeaderMap::new();\nmap.insert(header::CONTENT_LENGTH, <span class=\"string\">\"123\"</span>.parse().unwrap());\nmap.insert(header::CONTENT_TYPE, <span class=\"string\">\"json\"</span>.parse().unwrap());\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = map.into_iter();\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>((<span class=\"prelude-val\">Some</span>(header::CONTENT_LENGTH), <span class=\"string\">\"123\"</span>.parse().unwrap())));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>((<span class=\"prelude-val\">Some</span>(header::CONTENT_TYPE), <span class=\"string\">\"json\"</span>.parse().unwrap())));\n<span class=\"macro\">assert!</span>(iter.next().is_none());</code></pre></div>\n<p>Multiple values per key.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HeaderMap::new();\n\nmap.append(header::CONTENT_LENGTH, <span class=\"string\">\"123\"</span>.parse().unwrap());\nmap.append(header::CONTENT_LENGTH, <span class=\"string\">\"456\"</span>.parse().unwrap());\n\nmap.append(header::CONTENT_TYPE, <span class=\"string\">\"json\"</span>.parse().unwrap());\nmap.append(header::CONTENT_TYPE, <span class=\"string\">\"html\"</span>.parse().unwrap());\nmap.append(header::CONTENT_TYPE, <span class=\"string\">\"xml\"</span>.parse().unwrap());\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = map.into_iter();\n\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>((<span class=\"prelude-val\">Some</span>(header::CONTENT_LENGTH), <span class=\"string\">\"123\"</span>.parse().unwrap())));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>((<span class=\"prelude-val\">None</span>, <span class=\"string\">\"456\"</span>.parse().unwrap())));\n\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>((<span class=\"prelude-val\">Some</span>(header::CONTENT_TYPE), <span class=\"string\">\"json\"</span>.parse().unwrap())));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>((<span class=\"prelude-val\">None</span>, <span class=\"string\">\"html\"</span>.parse().unwrap())));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>((<span class=\"prelude-val\">None</span>, <span class=\"string\">\"xml\"</span>.parse().unwrap())));\n<span class=\"macro\">assert!</span>(iter.next().is_none());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = (<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;HeaderName&gt;, T)</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = IntoIter&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","wasmtime_wasi_http::types::FieldMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-HeaderMap%3CT%3E\" class=\"impl\"><a href=\"#impl-PartialEq-for-HeaderMap%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for HeaderMap&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;HeaderMap&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","wasmtime_wasi_http::types::FieldMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26HashMap%3CK,+V%3E%3E-for-HeaderMap%3CT%3E\" class=\"impl\"><a href=\"#impl-TryFrom%3C%26HashMap%3CK,+V%3E%3E-for-HeaderMap%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, V&gt;&gt; for HeaderMap&lt;T&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    HeaderName: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a K</a>&gt;,\n    &lt;HeaderName as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a K</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;Error&gt;,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a V</a>&gt;,\n    &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a V</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;Error&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Try to convert a <code>HashMap</code> into a <code>HeaderMap</code>.</p>\n<h4 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n<span class=\"kw\">use </span>std::convert::TryInto;\n<span class=\"kw\">use </span>http::HeaderMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HashMap::new();\nmap.insert(<span class=\"string\">\"X-Custom-Header\"</span>.to_string(), <span class=\"string\">\"my value\"</span>.to_string());\n\n<span class=\"kw\">let </span>headers: HeaderMap = (<span class=\"kw-2\">&amp;</span>map).try_into().expect(<span class=\"string\">\"valid headers\"</span>);\n<span class=\"macro\">assert_eq!</span>(headers[<span class=\"string\">\"X-Custom-Header\"</span>], <span class=\"string\">\"my value\"</span>);</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = Error</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    c: &amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, V&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;HeaderMap&lt;T&gt;, &lt;HeaderMap&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, V&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&'a HashMap<K, V>>","wasmtime_wasi_http::types::FieldMap"],["<section id=\"impl-Eq-for-HeaderMap%3CT%3E\" class=\"impl\"><a href=\"#impl-Eq-for-HeaderMap%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for HeaderMap&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","wasmtime_wasi_http::types::FieldMap"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()