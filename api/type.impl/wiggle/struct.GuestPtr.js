(function() {var type_impls = {
"wasi_common":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-GuestPtr%3C'_,+T%3E\" class=\"impl\"><a href=\"#impl-Clone-for-GuestPtr%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for GuestPtr&lt;'_, T&gt;<div class=\"where\">where\n    T: Pointee + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; GuestPtr&lt;'_, T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","wasi_common::snapshots::preview_0::types::IovecArray","wasi_common::snapshots::preview_0::types::CiovecArray","wasi_common::snapshots::preview_1::types::IovecArray","wasi_common::snapshots::preview_1::types::CiovecArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-GuestPtr%3C'_,+T%3E\" class=\"impl\"><a href=\"#impl-Debug-for-GuestPtr%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for GuestPtr&lt;'_, T&gt;<div class=\"where\">where\n    T: Pointee + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","wasi_common::snapshots::preview_0::types::IovecArray","wasi_common::snapshots::preview_0::types::CiovecArray","wasi_common::snapshots::preview_1::types::IovecArray","wasi_common::snapshots::preview_1::types::CiovecArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GuestPtr%3C'a,+%5BT%5D%3E\" class=\"impl\"><a href=\"#impl-GuestPtr%3C'a,+%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; GuestPtr&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset_base\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">offset_base</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>For slices, specifically returns the relative pointer to the base of the\narray.</p>\n<p>This is similar to <code>&lt;[T]&gt;::as_ptr()</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>For slices, returns the length of the slice, in elements.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">iter</a>&lt;'b&gt;(&amp;'b self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/exact_size/trait.ExactSizeIterator.html\" title=\"trait core::iter::traits::exact_size::ExactSizeIterator\">ExactSizeIterator</a> + 'b<div class=\"where\">where\n    T: GuestType&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over interior pointers.</p>\n<p>Each item is a <code>Result</code> indicating whether it overflowed past the end of\nthe address space or not.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_cow\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_cow</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;GuestCow&lt;'a, T&gt;, GuestError&gt;<div class=\"where\">where\n    T: GuestTypeTransparent&lt;'a&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + 'a,</div></h4></section></summary><div class=\"docblock\"><p>Attempts to create a [<code>GuestCow&lt;'_, T&gt;</code>] from this pointer, performing\nbounds checks and type validation. Whereas [<code>GuestPtr::as_slice</code>] will\nfail with <code>None</code> if attempting to access Wasm shared memory, this call\nwill succeed: if used on shared memory, this function will copy the\nslice into [<code>GuestCow::Copied</code>]. If the memory is non-shared, this\nreturns a [<code>GuestCow::Borrowed</code>] (a thin wrapper over [<code>GuestSlice&lt;'_, T&gt;]</code>).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_slice</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;GuestSlice&lt;'a, T&gt;&gt;, GuestError&gt;<div class=\"where\">where\n    T: GuestTypeTransparent&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Attempts to create a [<code>GuestSlice&lt;'_, T&gt;</code>] from this pointer, performing\nbounds checks and type validation. The <code>GuestSlice</code> is a smart pointer\nthat can be used as a <code>&amp;[T]</code> via the <code>Deref</code> trait.</p>\n<p>This method will flag the entire linear memory as marked with a shared\nborrow. This means that any writes to memory are disallowed until\nthe returned <code>GuestSlice</code> is dropped.</p>\n<p>This function will return a <code>GuestSlice</code> into host memory if all checks\nsucceed (valid utf-8, valid pointers, memory is not borrowed, etc.). If\nany checks fail then <code>GuestError</code> will be returned.</p>\n<p>Additionally, because it is <code>unsafe</code> to have a <code>GuestSlice</code> of shared\nmemory, this function will return <code>None</code> in this case (see\n[<code>GuestPtr::as_cow</code>]).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_slice_mut</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;GuestSliceMut&lt;'a, T&gt;&gt;, GuestError&gt;<div class=\"where\">where\n    T: GuestTypeTransparent&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Attempts to create a [<code>GuestSliceMut&lt;'_, T&gt;</code>] from this pointer,\nperforming bounds checks and type validation. The <code>GuestSliceMut</code> is a\nsmart pointer that can be used as a <code>&amp;[T]</code> or a <code>&amp;mut [T]</code> via the\n<code>Deref</code> and <code>DerefMut</code> traits.</p>\n<p>This method will flag the entire linear memory as marked with a mutable\nborrow. This means that all reads/writes to memory are disallowed until\nthe returned <code>GuestSliceMut</code> type is dropped.</p>\n<p>This function will return a <code>GuestSliceMut</code> into host memory if all\nchecks succeed (valid utf-8, valid pointers, memory is not borrowed,\netc). If any checks fail then <code>GuestError</code> will be returned.</p>\n<p>Additionally, because it is <code>unsafe</code> to have a <code>GuestSliceMut</code> of shared\nmemory, this function will return <code>None</code> in this case.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_unsafe_slice_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_unsafe_slice_mut</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;UnsafeGuestSlice&lt;'a, T&gt;, GuestError&gt;<div class=\"where\">where\n    T: GuestTypeTransparent&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Similar to <code>as_slice_mut</code>, this function will attempt to create a smart\npointer to the WebAssembly linear memory. All validation and Wiggle\nborrow checking is the same, but unlike <code>as_slice_mut</code>, the returned\n<code>&amp;mut</code> slice can point to WebAssembly shared memory. Though the Wiggle\nborrow checker can guarantee no other Wiggle calls will access this\nslice, it cannot guarantee that another thread is not modifying the\n<code>&amp;mut</code> slice in some other way. Thus, access to that slice is marked\n<code>unsafe</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_vec\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">to_vec</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, GuestError&gt;<div class=\"where\">where\n    T: GuestTypeTransparent&lt;'a&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + 'a,</div></h4></section></summary><div class=\"docblock\"><p>Copies the data in the guest region into a <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a>.</p>\n<p>This is useful when one cannot use [<code>GuestPtr::as_slice</code>], e.g., when\npointing to a region of WebAssembly shared memory.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copy_from_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">copy_from_slice</a>(&amp;self, slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, GuestError&gt;<div class=\"where\">where\n    T: GuestTypeTransparent&lt;'a&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + 'a,</div></h4></section></summary><div class=\"docblock\"><p>Copies the data pointed to by <code>slice</code> into this guest region.</p>\n<p>This method is a <em>safe</em> method to copy data from the host to the guest.\nThis requires that <code>self</code> and <code>slice</code> have the same length. The pointee\ntype <code>T</code> requires the [<code>GuestTypeTransparent</code>] trait which is an\nassertion that the representation on the host and on the guest is the\nsame.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns an error if this guest pointer is out of bounds or if the length\nof this guest pointer is not equal to the length of the slice provided.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_ptr</a>(&amp;self) -&gt; GuestPtr&lt;'a, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <code>GuestPtr</code> pointing to the base of the array for the interior\ntype <code>T</code>.</p>\n</div></details><section id=\"method.get\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;GuestPtr&lt;'a, T&gt;&gt;<div class=\"where\">where\n    T: GuestType&lt;'a&gt;,</div></h4></section><section id=\"method.get_range\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_range</a>(&amp;self, r: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;GuestPtr&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;&gt;<div class=\"where\">where\n    T: GuestType&lt;'a&gt;,</div></h4></section></div></details>",0,"wasi_common::snapshots::preview_0::types::IovecArray","wasi_common::snapshots::preview_0::types::CiovecArray","wasi_common::snapshots::preview_1::types::IovecArray","wasi_common::snapshots::preview_1::types::CiovecArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GuestPtr%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-GuestPtr%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; GuestPtr&lt;'a, T&gt;<div class=\"where\">where\n    T: Pointee + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(\n    mem: &amp;'a dyn GuestMemory,\n    pointer: &lt;T as Pointee&gt;::Pointer\n) -&gt; GuestPtr&lt;'a, T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>GuestPtr</code> from the given <code>mem</code> and <code>pointer</code> values.</p>\n<p>Note that for sized types like <code>u32</code>, <code>GuestPtr&lt;T&gt;</code>, etc, the <code>pointer</code>\nvalue is a <code>u32</code> offset into guest memory. For slices and strings,\n<code>pointer</code> is a <code>(u32, u32)</code> offset/length pair.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">offset</a>(&amp;self) -&gt; &lt;T as Pointee&gt;::Pointer</h4></section></summary><div class=\"docblock\"><p>Returns the offset of this pointer in guest memory.</p>\n<p>Note that for sized types this returns a <code>u32</code>, but for slices and\nstrings it returns a <code>(u32, u32)</code> pointer/length pair.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mem\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">mem</a>(&amp;self) -&gt; &amp;'a dyn GuestMemory</h4></section></summary><div class=\"docblock\"><p>Returns the guest memory that this pointer is coming from.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">cast</a>&lt;U&gt;(&amp;self) -&gt; GuestPtr&lt;'a, U&gt;<div class=\"where\">where\n    U: Pointee&lt;Pointer = &lt;T as Pointee&gt;::Pointer&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Casts this <code>GuestPtr</code> type to a different type.</p>\n<p>This is a safe method which is useful for simply reinterpreting the type\nparameter on this <code>GuestPtr</code>. Note that this is a safe method, where\nagain there’s no guarantees about alignment, validity, in-bounds-ness,\netc of the returned pointer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">read</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, GuestError&gt;<div class=\"where\">where\n    T: GuestType&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Safely read a value from this pointer.</p>\n<p>This is a fun method, and is one of the lynchpins of this\nimplementation. The highlight here is that this is a <em>safe</em> operation,\nnot an unsafe one like <code>*mut T</code>. This works for a few reasons:</p>\n<ul>\n<li>\n<p>The <code>unsafe</code> contract of the <code>GuestMemory</code> trait means that there’s\nalways at least some backing memory for this <code>GuestPtr&lt;T&gt;</code>.</p>\n</li>\n<li>\n<p>This does not use Rust-intrinsics to read the type <code>T</code>, but rather it\ndelegates to <code>T</code>’s implementation of [<code>GuestType</code>] to actually read\nthe underlying data. This again is a safe method, so any unsafety, if\nany, must be internally documented.</p>\n</li>\n<li>\n<p>Eventually what typically happens it that this bottoms out in the read\nimplementations for primitives types (like <code>i32</code>) which can safely be\nread at any time, and then it’s up to the runtime to determine what to\ndo with the bytes it read in a safe manner.</p>\n</li>\n</ul>\n<p>Naturally lots of things can still go wrong, such as out-of-bounds\nchecks, alignment checks, validity checks (e.g. for enums), etc. All of\nthese check failures, however, are returned as a [<code>GuestError</code>] in the\n<code>Result</code> here, and <code>Ok</code> is only returned if all the checks passed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">write</a>(&amp;self, val: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, GuestError&gt;<div class=\"where\">where\n    T: GuestType&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Safely write a value to this pointer.</p>\n<p>This method, like [<code>GuestPtr::read</code>], is pretty crucial for the safe\noperation of this crate. All the same reasons apply though for why this\nmethod is safe, even eventually bottoming out in primitives like writing\nan <code>i32</code> which is safe to write bit patterns into memory at any time due\nto the guarantees of [<code>GuestMemory</code>].</p>\n<p>Like <code>read</code>, <code>write</code> can fail due to any manner of pointer checks, but\nany failure is returned as a [<code>GuestError</code>].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">add</a>(&amp;self, amt: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;GuestPtr&lt;'a, T&gt;, GuestError&gt;<div class=\"where\">where\n    T: GuestType&lt;'a&gt; + Pointee&lt;Pointer = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Performs pointer arithmetic on this pointer, moving the pointer forward\n<code>amt</code> slots.</p>\n<p>This will either return the resulting pointer or <code>Err</code> if the pointer\narithmetic calculation would overflow around the end of the address\nspace.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_array\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_array</a>(&amp;self, elems: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; GuestPtr&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    T: GuestType&lt;'a&gt; + Pointee&lt;Pointer = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a <code>GuestPtr</code> for an array of <code>T</code>s using this pointer as the\nbase.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_shared_memory\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_shared_memory</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Check if this pointer references WebAssembly shared memory.</p>\n</div></details></div></details>",0,"wasi_common::snapshots::preview_0::types::IovecArray","wasi_common::snapshots::preview_0::types::CiovecArray","wasi_common::snapshots::preview_1::types::IovecArray","wasi_common::snapshots::preview_1::types::CiovecArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GuestType%3C'a%3E-for-GuestPtr%3C'a,+%5BT%5D%3E\" class=\"impl\"><a href=\"#impl-GuestType%3C'a%3E-for-GuestPtr%3C'a,+%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; GuestType&lt;'a&gt; for GuestPtr&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    T: GuestType&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.guest_size\" class=\"method trait-impl\"><a href=\"#method.guest_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">guest_size</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Returns the size, in bytes, of this type in the guest memory.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.guest_align\" class=\"method trait-impl\"><a href=\"#method.guest_align\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">guest_align</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the required alignment of this type, in bytes, for both guest\nand host memory.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">read</a>(\n    ptr: &amp;GuestPtr&lt;'a, GuestPtr&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;GuestPtr&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;, GuestError&gt;</h4></section></summary><div class='docblock'>Reads this value from the provided <code>ptr</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write</a>(\n    ptr: &amp;GuestPtr&lt;'_, GuestPtr&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;&gt;,\n    val: GuestPtr&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, GuestError&gt;</h4></section></summary><div class='docblock'>Writes a value to <code>ptr</code> after verifying that <code>ptr</code> is indeed valid to\nstore <code>val</code>. <a>Read more</a></div></details></div></details>","GuestType<'a>","wasi_common::snapshots::preview_0::types::IovecArray","wasi_common::snapshots::preview_0::types::CiovecArray","wasi_common::snapshots::preview_1::types::IovecArray","wasi_common::snapshots::preview_1::types::CiovecArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GuestType%3C'a%3E-for-GuestPtr%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-GuestType%3C'a%3E-for-GuestPtr%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; GuestType&lt;'a&gt; for GuestPtr&lt;'a, T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.guest_size\" class=\"method trait-impl\"><a href=\"#method.guest_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">guest_size</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Returns the size, in bytes, of this type in the guest memory.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.guest_align\" class=\"method trait-impl\"><a href=\"#method.guest_align\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">guest_align</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the required alignment of this type, in bytes, for both guest\nand host memory.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">read</a>(\n    ptr: &amp;GuestPtr&lt;'a, GuestPtr&lt;'a, T&gt;&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;GuestPtr&lt;'a, T&gt;, GuestError&gt;</h4></section></summary><div class='docblock'>Reads this value from the provided <code>ptr</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write</a>(\n    ptr: &amp;GuestPtr&lt;'_, GuestPtr&lt;'a, T&gt;&gt;,\n    val: GuestPtr&lt;'a, T&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, GuestError&gt;</h4></section></summary><div class='docblock'>Writes a value to <code>ptr</code> after verifying that <code>ptr</code> is indeed valid to\nstore <code>val</code>. <a>Read more</a></div></details></div></details>","GuestType<'a>","wasi_common::snapshots::preview_0::types::IovecArray","wasi_common::snapshots::preview_0::types::CiovecArray","wasi_common::snapshots::preview_1::types::IovecArray","wasi_common::snapshots::preview_1::types::CiovecArray"],["<section id=\"impl-Copy-for-GuestPtr%3C'_,+T%3E\" class=\"impl\"><a href=\"#impl-Copy-for-GuestPtr%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for GuestPtr&lt;'_, T&gt;<div class=\"where\">where\n    T: Pointee + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Copy","wasi_common::snapshots::preview_0::types::IovecArray","wasi_common::snapshots::preview_0::types::CiovecArray","wasi_common::snapshots::preview_1::types::IovecArray","wasi_common::snapshots::preview_1::types::CiovecArray"]],
"wasmtime_wasi":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-GuestPtr%3C'_,+T%3E\" class=\"impl\"><a href=\"#impl-Clone-for-GuestPtr%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for GuestPtr&lt;'_, T&gt;<div class=\"where\">where\n    T: Pointee + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; GuestPtr&lt;'_, T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","wasmtime_wasi::preview0::types::IovecArray","wasmtime_wasi::preview0::types::CiovecArray","wasmtime_wasi::preview1::types::IovecArray","wasmtime_wasi::preview1::types::CiovecArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-GuestPtr%3C'_,+T%3E\" class=\"impl\"><a href=\"#impl-Debug-for-GuestPtr%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for GuestPtr&lt;'_, T&gt;<div class=\"where\">where\n    T: Pointee + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","wasmtime_wasi::preview0::types::IovecArray","wasmtime_wasi::preview0::types::CiovecArray","wasmtime_wasi::preview1::types::IovecArray","wasmtime_wasi::preview1::types::CiovecArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GuestPtr%3C'a,+%5BT%5D%3E\" class=\"impl\"><a href=\"#impl-GuestPtr%3C'a,+%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; GuestPtr&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset_base\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">offset_base</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>For slices, specifically returns the relative pointer to the base of the\narray.</p>\n<p>This is similar to <code>&lt;[T]&gt;::as_ptr()</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>For slices, returns the length of the slice, in elements.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">iter</a>&lt;'b&gt;(&amp;'b self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/exact_size/trait.ExactSizeIterator.html\" title=\"trait core::iter::traits::exact_size::ExactSizeIterator\">ExactSizeIterator</a> + 'b<div class=\"where\">where\n    T: GuestType&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over interior pointers.</p>\n<p>Each item is a <code>Result</code> indicating whether it overflowed past the end of\nthe address space or not.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_cow\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_cow</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;GuestCow&lt;'a, T&gt;, GuestError&gt;<div class=\"where\">where\n    T: GuestTypeTransparent&lt;'a&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + 'a,</div></h4></section></summary><div class=\"docblock\"><p>Attempts to create a [<code>GuestCow&lt;'_, T&gt;</code>] from this pointer, performing\nbounds checks and type validation. Whereas [<code>GuestPtr::as_slice</code>] will\nfail with <code>None</code> if attempting to access Wasm shared memory, this call\nwill succeed: if used on shared memory, this function will copy the\nslice into [<code>GuestCow::Copied</code>]. If the memory is non-shared, this\nreturns a [<code>GuestCow::Borrowed</code>] (a thin wrapper over [<code>GuestSlice&lt;'_, T&gt;]</code>).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_slice</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;GuestSlice&lt;'a, T&gt;&gt;, GuestError&gt;<div class=\"where\">where\n    T: GuestTypeTransparent&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Attempts to create a [<code>GuestSlice&lt;'_, T&gt;</code>] from this pointer, performing\nbounds checks and type validation. The <code>GuestSlice</code> is a smart pointer\nthat can be used as a <code>&amp;[T]</code> via the <code>Deref</code> trait.</p>\n<p>This method will flag the entire linear memory as marked with a shared\nborrow. This means that any writes to memory are disallowed until\nthe returned <code>GuestSlice</code> is dropped.</p>\n<p>This function will return a <code>GuestSlice</code> into host memory if all checks\nsucceed (valid utf-8, valid pointers, memory is not borrowed, etc.). If\nany checks fail then <code>GuestError</code> will be returned.</p>\n<p>Additionally, because it is <code>unsafe</code> to have a <code>GuestSlice</code> of shared\nmemory, this function will return <code>None</code> in this case (see\n[<code>GuestPtr::as_cow</code>]).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_slice_mut</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;GuestSliceMut&lt;'a, T&gt;&gt;, GuestError&gt;<div class=\"where\">where\n    T: GuestTypeTransparent&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Attempts to create a [<code>GuestSliceMut&lt;'_, T&gt;</code>] from this pointer,\nperforming bounds checks and type validation. The <code>GuestSliceMut</code> is a\nsmart pointer that can be used as a <code>&amp;[T]</code> or a <code>&amp;mut [T]</code> via the\n<code>Deref</code> and <code>DerefMut</code> traits.</p>\n<p>This method will flag the entire linear memory as marked with a mutable\nborrow. This means that all reads/writes to memory are disallowed until\nthe returned <code>GuestSliceMut</code> type is dropped.</p>\n<p>This function will return a <code>GuestSliceMut</code> into host memory if all\nchecks succeed (valid utf-8, valid pointers, memory is not borrowed,\netc). If any checks fail then <code>GuestError</code> will be returned.</p>\n<p>Additionally, because it is <code>unsafe</code> to have a <code>GuestSliceMut</code> of shared\nmemory, this function will return <code>None</code> in this case.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_unsafe_slice_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_unsafe_slice_mut</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;UnsafeGuestSlice&lt;'a, T&gt;, GuestError&gt;<div class=\"where\">where\n    T: GuestTypeTransparent&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Similar to <code>as_slice_mut</code>, this function will attempt to create a smart\npointer to the WebAssembly linear memory. All validation and Wiggle\nborrow checking is the same, but unlike <code>as_slice_mut</code>, the returned\n<code>&amp;mut</code> slice can point to WebAssembly shared memory. Though the Wiggle\nborrow checker can guarantee no other Wiggle calls will access this\nslice, it cannot guarantee that another thread is not modifying the\n<code>&amp;mut</code> slice in some other way. Thus, access to that slice is marked\n<code>unsafe</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_vec\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">to_vec</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, GuestError&gt;<div class=\"where\">where\n    T: GuestTypeTransparent&lt;'a&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + 'a,</div></h4></section></summary><div class=\"docblock\"><p>Copies the data in the guest region into a <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a>.</p>\n<p>This is useful when one cannot use [<code>GuestPtr::as_slice</code>], e.g., when\npointing to a region of WebAssembly shared memory.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copy_from_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">copy_from_slice</a>(&amp;self, slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, GuestError&gt;<div class=\"where\">where\n    T: GuestTypeTransparent&lt;'a&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + 'a,</div></h4></section></summary><div class=\"docblock\"><p>Copies the data pointed to by <code>slice</code> into this guest region.</p>\n<p>This method is a <em>safe</em> method to copy data from the host to the guest.\nThis requires that <code>self</code> and <code>slice</code> have the same length. The pointee\ntype <code>T</code> requires the [<code>GuestTypeTransparent</code>] trait which is an\nassertion that the representation on the host and on the guest is the\nsame.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns an error if this guest pointer is out of bounds or if the length\nof this guest pointer is not equal to the length of the slice provided.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_ptr</a>(&amp;self) -&gt; GuestPtr&lt;'a, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <code>GuestPtr</code> pointing to the base of the array for the interior\ntype <code>T</code>.</p>\n</div></details><section id=\"method.get\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;GuestPtr&lt;'a, T&gt;&gt;<div class=\"where\">where\n    T: GuestType&lt;'a&gt;,</div></h4></section><section id=\"method.get_range\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_range</a>(&amp;self, r: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;GuestPtr&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;&gt;<div class=\"where\">where\n    T: GuestType&lt;'a&gt;,</div></h4></section></div></details>",0,"wasmtime_wasi::preview0::types::IovecArray","wasmtime_wasi::preview0::types::CiovecArray","wasmtime_wasi::preview1::types::IovecArray","wasmtime_wasi::preview1::types::CiovecArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GuestPtr%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-GuestPtr%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; GuestPtr&lt;'a, T&gt;<div class=\"where\">where\n    T: Pointee + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(\n    mem: &amp;'a dyn GuestMemory,\n    pointer: &lt;T as Pointee&gt;::Pointer\n) -&gt; GuestPtr&lt;'a, T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>GuestPtr</code> from the given <code>mem</code> and <code>pointer</code> values.</p>\n<p>Note that for sized types like <code>u32</code>, <code>GuestPtr&lt;T&gt;</code>, etc, the <code>pointer</code>\nvalue is a <code>u32</code> offset into guest memory. For slices and strings,\n<code>pointer</code> is a <code>(u32, u32)</code> offset/length pair.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">offset</a>(&amp;self) -&gt; &lt;T as Pointee&gt;::Pointer</h4></section></summary><div class=\"docblock\"><p>Returns the offset of this pointer in guest memory.</p>\n<p>Note that for sized types this returns a <code>u32</code>, but for slices and\nstrings it returns a <code>(u32, u32)</code> pointer/length pair.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mem\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">mem</a>(&amp;self) -&gt; &amp;'a dyn GuestMemory</h4></section></summary><div class=\"docblock\"><p>Returns the guest memory that this pointer is coming from.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">cast</a>&lt;U&gt;(&amp;self) -&gt; GuestPtr&lt;'a, U&gt;<div class=\"where\">where\n    U: Pointee&lt;Pointer = &lt;T as Pointee&gt;::Pointer&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Casts this <code>GuestPtr</code> type to a different type.</p>\n<p>This is a safe method which is useful for simply reinterpreting the type\nparameter on this <code>GuestPtr</code>. Note that this is a safe method, where\nagain there’s no guarantees about alignment, validity, in-bounds-ness,\netc of the returned pointer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">read</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, GuestError&gt;<div class=\"where\">where\n    T: GuestType&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Safely read a value from this pointer.</p>\n<p>This is a fun method, and is one of the lynchpins of this\nimplementation. The highlight here is that this is a <em>safe</em> operation,\nnot an unsafe one like <code>*mut T</code>. This works for a few reasons:</p>\n<ul>\n<li>\n<p>The <code>unsafe</code> contract of the <code>GuestMemory</code> trait means that there’s\nalways at least some backing memory for this <code>GuestPtr&lt;T&gt;</code>.</p>\n</li>\n<li>\n<p>This does not use Rust-intrinsics to read the type <code>T</code>, but rather it\ndelegates to <code>T</code>’s implementation of [<code>GuestType</code>] to actually read\nthe underlying data. This again is a safe method, so any unsafety, if\nany, must be internally documented.</p>\n</li>\n<li>\n<p>Eventually what typically happens it that this bottoms out in the read\nimplementations for primitives types (like <code>i32</code>) which can safely be\nread at any time, and then it’s up to the runtime to determine what to\ndo with the bytes it read in a safe manner.</p>\n</li>\n</ul>\n<p>Naturally lots of things can still go wrong, such as out-of-bounds\nchecks, alignment checks, validity checks (e.g. for enums), etc. All of\nthese check failures, however, are returned as a [<code>GuestError</code>] in the\n<code>Result</code> here, and <code>Ok</code> is only returned if all the checks passed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">write</a>(&amp;self, val: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, GuestError&gt;<div class=\"where\">where\n    T: GuestType&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Safely write a value to this pointer.</p>\n<p>This method, like [<code>GuestPtr::read</code>], is pretty crucial for the safe\noperation of this crate. All the same reasons apply though for why this\nmethod is safe, even eventually bottoming out in primitives like writing\nan <code>i32</code> which is safe to write bit patterns into memory at any time due\nto the guarantees of [<code>GuestMemory</code>].</p>\n<p>Like <code>read</code>, <code>write</code> can fail due to any manner of pointer checks, but\nany failure is returned as a [<code>GuestError</code>].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">add</a>(&amp;self, amt: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;GuestPtr&lt;'a, T&gt;, GuestError&gt;<div class=\"where\">where\n    T: GuestType&lt;'a&gt; + Pointee&lt;Pointer = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Performs pointer arithmetic on this pointer, moving the pointer forward\n<code>amt</code> slots.</p>\n<p>This will either return the resulting pointer or <code>Err</code> if the pointer\narithmetic calculation would overflow around the end of the address\nspace.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_array\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_array</a>(&amp;self, elems: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; GuestPtr&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    T: GuestType&lt;'a&gt; + Pointee&lt;Pointer = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a <code>GuestPtr</code> for an array of <code>T</code>s using this pointer as the\nbase.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_shared_memory\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_shared_memory</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Check if this pointer references WebAssembly shared memory.</p>\n</div></details></div></details>",0,"wasmtime_wasi::preview0::types::IovecArray","wasmtime_wasi::preview0::types::CiovecArray","wasmtime_wasi::preview1::types::IovecArray","wasmtime_wasi::preview1::types::CiovecArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GuestType%3C'a%3E-for-GuestPtr%3C'a,+%5BT%5D%3E\" class=\"impl\"><a href=\"#impl-GuestType%3C'a%3E-for-GuestPtr%3C'a,+%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; GuestType&lt;'a&gt; for GuestPtr&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    T: GuestType&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.guest_size\" class=\"method trait-impl\"><a href=\"#method.guest_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">guest_size</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Returns the size, in bytes, of this type in the guest memory.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.guest_align\" class=\"method trait-impl\"><a href=\"#method.guest_align\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">guest_align</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the required alignment of this type, in bytes, for both guest\nand host memory.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">read</a>(\n    ptr: &amp;GuestPtr&lt;'a, GuestPtr&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;GuestPtr&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;, GuestError&gt;</h4></section></summary><div class='docblock'>Reads this value from the provided <code>ptr</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write</a>(\n    ptr: &amp;GuestPtr&lt;'_, GuestPtr&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;&gt;,\n    val: GuestPtr&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, GuestError&gt;</h4></section></summary><div class='docblock'>Writes a value to <code>ptr</code> after verifying that <code>ptr</code> is indeed valid to\nstore <code>val</code>. <a>Read more</a></div></details></div></details>","GuestType<'a>","wasmtime_wasi::preview0::types::IovecArray","wasmtime_wasi::preview0::types::CiovecArray","wasmtime_wasi::preview1::types::IovecArray","wasmtime_wasi::preview1::types::CiovecArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GuestType%3C'a%3E-for-GuestPtr%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-GuestType%3C'a%3E-for-GuestPtr%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; GuestType&lt;'a&gt; for GuestPtr&lt;'a, T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.guest_size\" class=\"method trait-impl\"><a href=\"#method.guest_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">guest_size</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Returns the size, in bytes, of this type in the guest memory.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.guest_align\" class=\"method trait-impl\"><a href=\"#method.guest_align\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">guest_align</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the required alignment of this type, in bytes, for both guest\nand host memory.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">read</a>(\n    ptr: &amp;GuestPtr&lt;'a, GuestPtr&lt;'a, T&gt;&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;GuestPtr&lt;'a, T&gt;, GuestError&gt;</h4></section></summary><div class='docblock'>Reads this value from the provided <code>ptr</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write</a>(\n    ptr: &amp;GuestPtr&lt;'_, GuestPtr&lt;'a, T&gt;&gt;,\n    val: GuestPtr&lt;'a, T&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, GuestError&gt;</h4></section></summary><div class='docblock'>Writes a value to <code>ptr</code> after verifying that <code>ptr</code> is indeed valid to\nstore <code>val</code>. <a>Read more</a></div></details></div></details>","GuestType<'a>","wasmtime_wasi::preview0::types::IovecArray","wasmtime_wasi::preview0::types::CiovecArray","wasmtime_wasi::preview1::types::IovecArray","wasmtime_wasi::preview1::types::CiovecArray"],["<section id=\"impl-Copy-for-GuestPtr%3C'_,+T%3E\" class=\"impl\"><a href=\"#impl-Copy-for-GuestPtr%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for GuestPtr&lt;'_, T&gt;<div class=\"where\">where\n    T: Pointee + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Copy","wasmtime_wasi::preview0::types::IovecArray","wasmtime_wasi::preview0::types::CiovecArray","wasmtime_wasi::preview1::types::IovecArray","wasmtime_wasi::preview1::types::CiovecArray"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()